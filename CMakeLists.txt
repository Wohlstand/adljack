cmake_minimum_required(VERSION 3.6)

project(adljack VERSION 1.0 LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 14)
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")

set(PREFER_PDCURSES "OFF" CACHE STRING "Prefer PDCurses as terminal library")

set(WITH_MIDI_SEQUENCER OFF CACHE STRING "")
set(WITH_MUS_SUPPORT OFF CACHE STRING "")
set(WITH_XMI_SUPPORT OFF CACHE STRING "")
set(libADLMIDI_STATIC ON CACHE STRING "")
set(libADLMIDI_SHARED OFF CACHE STRING "")
set(libOPNMIDI_STATIC ON CACHE STRING "")
set(libOPNMIDI_SHARED OFF CACHE STRING "")
add_subdirectory("thirdparty/libADLMIDI")
add_subdirectory("thirdparty/libOPNMIDI")

include(FindPkgConfig)
include(CheckFunctionExists)

set(CURSES_FOUND FALSE)
set(PDCURSES_FOUND FALSE)
if(NOT PREFER_PDCURSES)
  find_package(Curses)
endif()
if(PREFER_PDCURSES OR NOT CURSES_FOUND)
  file(GLOB PDCURSES_SOURCES
    "thirdparty/PDCurses/sdl2/*.c"
    "thirdparty/PDCurses/pdcurses/*.c")
  add_library(pdcurses STATIC ${PDCURSES_SOURCES})
  target_compile_definitions(pdcurses PUBLIC "PDC_RGB")
  target_include_directories(pdcurses PUBLIC "thirdparty/PDCurses")
  find_package(SDL2 REQUIRED)
  if(SDL2_INCLUDE_DIRS AND SDL2_LIBRARIES)
    target_include_directories(pdcurses PRIVATE "${SDL2_INCLUDE_DIRS}")
    target_link_libraries(pdcurses PRIVATE "${SDL2_LIBRARIES}")
  else()
    target_link_libraries(pdcurses PRIVATE SDL2::SDL2)
  endif()
  check_function_exists("vsnprintf" HAVE_VSNPRINTF)
  check_function_exists("vsscanf" HAVE_VSSCANF)
  if(HAVE_VSNPRINTF)
    target_compile_definitions(pdcurses PUBLIC "HAVE_VSNPRINTF")
  endif()
  if(HAVE_VSSCANF)
    target_compile_definitions(pdcurses PUBLIC "HAVE_VSSCANF")
  endif()
  set(PDCURSES_FOUND TRUE)
endif()
if(NOT CMAKE_SYSTEM_NAME STREQUAL "Windows")
  pkg_check_modules(JACK "jack")
  pkg_check_modules(PULSEAUDIO "libpulse-simple")
else()
  set(JACK_FOUND FALSE)
  set(PULSEAUDIO_FOUND FALSE)
endif()

message("!! Feature summary:")
message("!!   Curses: ${CURSES_FOUND}")
message("!!   PdCurses: ${PDCURSES_FOUND}")
message("!!   Jack: ${JACK_FOUND}")
message("!!   Pulseaudio: ${PULSEAUDIO_FOUND}")

set(adl_sources
  "sources/tui.cc"
  "sources/tui_fileselect.cc"
  "sources/insnames.cc"
  "sources/common.cc")
if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  list(APPEND adl_sources
    "sources/winmm_dialog.rc")
endif()

## Jack version
if(NOT JACK_FOUND)
  message(WARNING "Jack not found. Not building ADL-jack.")
else()
  add_executable(adljack "sources/jackmain.cc" ${adl_sources})
  target_include_directories(adljack PRIVATE ${JACK_INCLUDE_DIRS})
  link_directories(${JACK_LIBRARY_DIRS})
  target_link_libraries(adljack PRIVATE ADLMIDI_static OPNMIDI_static ${JACK_LIBRARIES})
  if(CURSES_FOUND)
    target_compile_definitions(adljack PRIVATE "ADLJACK_USE_CURSES")
    target_include_directories(adljack PRIVATE ${CURSES_INCLUDE_DIRS})
    target_link_libraries(adljack PRIVATE ${CURSES_LIBRARIES})
  elseif(PDCURSES_FOUND)
    target_compile_definitions(adljack PRIVATE "ADLJACK_USE_CURSES")
    target_link_libraries(adljack PRIVATE pdcurses)
  endif()
  install(TARGETS adljack DESTINATION "bin")
endif()

## RtMidi library
add_library(RtMidi STATIC "thirdparty/rtmidi/RtMidi.cpp")
target_include_directories(RtMidi PUBLIC "thirdparty/rtmidi")
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  target_compile_definitions(RtMidi PUBLIC "__LINUX_ALSA__")
  target_link_libraries(RtMidi PUBLIC "asound")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  target_compile_definitions(RtMidi PUBLIC "__WINDOWS_MM__")
  target_link_libraries(RtMidi PUBLIC "winmm")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  target_compile_definitions(RtMidi PUBLIC "__MACOSX_CORE__")
  find_library(COREMIDI_LIBRARY "CoreMidi")
  target_link_libraries(RtMidi PUBLIC "${COREMIDI_LIBRARY}")
endif()

## RtAudio library
add_library(RtAudio STATIC "thirdparty/rtaudio/RtAudio.cpp")
target_include_directories(RtAudio PUBLIC "thirdparty/rtaudio")
target_include_directories(RtAudio PRIVATE "thirdparty/rtaudio/include")
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  target_compile_definitions(RtAudio PUBLIC "__LINUX_ALSA__")
  target_link_libraries(RtAudio PUBLIC "asound")
  if(PULSEAUDIO_FOUND)
    target_compile_definitions(RtAudio PUBLIC "__LINUX_PULSE__")
    target_include_directories(RtAudio PUBLIC ${PULSEAUDIO_INCLUDE_DIRS})
    link_directories(${PULSEAUDIO_LIBRARY_DIRS})
    target_link_libraries(RtAudio PUBLIC ${PULSEAUDIO_LIBRARIES})
  endif()
  # target_compile_definitions(RtAudio PUBLIC "__LINUX_OSS__")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  target_compile_definitions(RtAudio PUBLIC "__WINDOWS_DS__")
  target_link_libraries(RtAudio PUBLIC "dsound")
  target_compile_definitions(RtAudio PUBLIC "__WINDOWS_WASAPI__")
  target_link_libraries(RtAudio PUBLIC "ksguid")
  target_compile_definitions(RtAudio PUBLIC "__WINDOWS_ASIO__")
  target_sources(RtAudio PRIVATE
    "thirdparty/rtaudio/include/asio.cpp"
    "thirdparty/rtaudio/include/asiodrivers.cpp"
    "thirdparty/rtaudio/include/asiolist.cpp"
    "thirdparty/rtaudio/include/iasiothiscallresolver.cpp")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  target_compile_definitions(RtAudio PUBLIC "__MACOSX_CORE__")
  find_library(COREAUDIO_LIBRARY "CoreAudio")
  target_link_libraries(RtAudio PUBLIC "${COREAUDIO_LIBRARY}")
endif()
if(JACK_FOUND)
  target_compile_definitions(RtAudio PUBLIC "__UNIX_JACK__")
  target_include_directories(RtAudio PUBLIC ${JACK_INCLUDE_DIRS})
  link_directories(${JACK_LIBRARY_DIRS})
  target_link_libraries(RtAudio PUBLIC ${JACK_LIBRARIES})
endif()


## Cross platform version
add_subdirectory("thirdparty/ring-buffer")
add_executable(adlrt "sources/rtmain.cc" ${adl_sources})
target_link_libraries(adlrt PRIVATE ADLMIDI_static OPNMIDI_static ring_buffer RtAudio RtMidi)
if(CURSES_FOUND)
  target_compile_definitions(adlrt PRIVATE "ADLJACK_USE_CURSES")
  target_include_directories(adlrt PRIVATE ${CURSES_INCLUDE_DIRS})
  target_link_libraries(adlrt PRIVATE ${CURSES_LIBRARIES})
elseif(PDCURSES_FOUND)
  target_compile_definitions(adlrt PRIVATE "ADLJACK_USE_CURSES")
  target_link_libraries(adlrt PRIVATE pdcurses)
endif()
install(TARGETS adlrt DESTINATION "bin")
