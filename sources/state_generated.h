// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STATE_FB_STATE_H_
#define FLATBUFFERS_GENERATED_STATE_FB_STATE_H_

#include "flatbuffers/flatbuffers.h"

namespace fb {
namespace state {

struct State;

struct Channel_State;

struct Player_Id;

struct Player_State;

struct State FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHANNEL = 4,
    VT_PLAYER = 6,
    VT_CHIP_COUNT = 8,
    VT_VOLUME = 10,
    VT_ACTIVE_ID = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<Channel_State>> *channel() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Channel_State>> *>(VT_CHANNEL);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Player_State>> *player() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Player_State>> *>(VT_PLAYER);
  }
  uint8_t chip_count() const {
    return GetField<uint8_t>(VT_CHIP_COUNT, 1);
  }
  uint16_t volume() const {
    return GetField<uint16_t>(VT_VOLUME, 100);
  }
  const Player_Id *active_id() const {
    return GetPointer<const Player_Id *>(VT_ACTIVE_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CHANNEL) &&
           verifier.Verify(channel()) &&
           verifier.VerifyVectorOfTables(channel()) &&
           VerifyOffsetRequired(verifier, VT_PLAYER) &&
           verifier.Verify(player()) &&
           verifier.VerifyVectorOfTables(player()) &&
           VerifyField<uint8_t>(verifier, VT_CHIP_COUNT) &&
           VerifyField<uint16_t>(verifier, VT_VOLUME) &&
           VerifyOffsetRequired(verifier, VT_ACTIVE_ID) &&
           verifier.VerifyTable(active_id()) &&
           verifier.EndTable();
  }
};

struct StateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_channel(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Channel_State>>> channel) {
    fbb_.AddOffset(State::VT_CHANNEL, channel);
  }
  void add_player(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Player_State>>> player) {
    fbb_.AddOffset(State::VT_PLAYER, player);
  }
  void add_chip_count(uint8_t chip_count) {
    fbb_.AddElement<uint8_t>(State::VT_CHIP_COUNT, chip_count, 1);
  }
  void add_volume(uint16_t volume) {
    fbb_.AddElement<uint16_t>(State::VT_VOLUME, volume, 100);
  }
  void add_active_id(flatbuffers::Offset<Player_Id> active_id) {
    fbb_.AddOffset(State::VT_ACTIVE_ID, active_id);
  }
  explicit StateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StateBuilder &operator=(const StateBuilder &);
  flatbuffers::Offset<State> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<State>(end);
    fbb_.Required(o, State::VT_CHANNEL);
    fbb_.Required(o, State::VT_PLAYER);
    fbb_.Required(o, State::VT_ACTIVE_ID);
    return o;
  }
};

inline flatbuffers::Offset<State> CreateState(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Channel_State>>> channel = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Player_State>>> player = 0,
    uint8_t chip_count = 1,
    uint16_t volume = 100,
    flatbuffers::Offset<Player_Id> active_id = 0) {
  StateBuilder builder_(_fbb);
  builder_.add_active_id(active_id);
  builder_.add_player(player);
  builder_.add_channel(channel);
  builder_.add_volume(volume);
  builder_.add_chip_count(chip_count);
  return builder_.Finish();
}

inline flatbuffers::Offset<State> CreateStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Channel_State>> *channel = nullptr,
    const std::vector<flatbuffers::Offset<Player_State>> *player = nullptr,
    uint8_t chip_count = 1,
    uint16_t volume = 100,
    flatbuffers::Offset<Player_Id> active_id = 0) {
  return fb::state::CreateState(
      _fbb,
      channel ? _fbb.CreateVector<flatbuffers::Offset<Channel_State>>(*channel) : 0,
      player ? _fbb.CreateVector<flatbuffers::Offset<Player_State>>(*player) : 0,
      chip_count,
      volume,
      active_id);
}

struct Channel_State FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PROGRAM = 4,
    VT_BANK = 6
  };
  uint8_t program() const {
    return GetField<uint8_t>(VT_PROGRAM, 0);
  }
  uint16_t bank() const {
    return GetField<uint16_t>(VT_BANK, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PROGRAM) &&
           VerifyField<uint16_t>(verifier, VT_BANK) &&
           verifier.EndTable();
  }
};

struct Channel_StateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_program(uint8_t program) {
    fbb_.AddElement<uint8_t>(Channel_State::VT_PROGRAM, program, 0);
  }
  void add_bank(uint16_t bank) {
    fbb_.AddElement<uint16_t>(Channel_State::VT_BANK, bank, 0);
  }
  explicit Channel_StateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Channel_StateBuilder &operator=(const Channel_StateBuilder &);
  flatbuffers::Offset<Channel_State> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Channel_State>(end);
    return o;
  }
};

inline flatbuffers::Offset<Channel_State> CreateChannel_State(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t program = 0,
    uint16_t bank = 0) {
  Channel_StateBuilder builder_(_fbb);
  builder_.add_bank(bank);
  builder_.add_program(program);
  return builder_.Finish();
}

struct Player_Id FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PLAYER = 4,
    VT_EMULATOR = 6
  };
  const flatbuffers::String *player() const {
    return GetPointer<const flatbuffers::String *>(VT_PLAYER);
  }
  const flatbuffers::String *emulator() const {
    return GetPointer<const flatbuffers::String *>(VT_EMULATOR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_PLAYER) &&
           verifier.Verify(player()) &&
           VerifyOffsetRequired(verifier, VT_EMULATOR) &&
           verifier.Verify(emulator()) &&
           verifier.EndTable();
  }
};

struct Player_IdBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player(flatbuffers::Offset<flatbuffers::String> player) {
    fbb_.AddOffset(Player_Id::VT_PLAYER, player);
  }
  void add_emulator(flatbuffers::Offset<flatbuffers::String> emulator) {
    fbb_.AddOffset(Player_Id::VT_EMULATOR, emulator);
  }
  explicit Player_IdBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Player_IdBuilder &operator=(const Player_IdBuilder &);
  flatbuffers::Offset<Player_Id> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Player_Id>(end);
    fbb_.Required(o, Player_Id::VT_PLAYER);
    fbb_.Required(o, Player_Id::VT_EMULATOR);
    return o;
  }
};

inline flatbuffers::Offset<Player_Id> CreatePlayer_Id(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> player = 0,
    flatbuffers::Offset<flatbuffers::String> emulator = 0) {
  Player_IdBuilder builder_(_fbb);
  builder_.add_emulator(emulator);
  builder_.add_player(player);
  return builder_.Finish();
}

inline flatbuffers::Offset<Player_Id> CreatePlayer_IdDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *player = nullptr,
    const char *emulator = nullptr) {
  return fb::state::CreatePlayer_Id(
      _fbb,
      player ? _fbb.CreateString(player) : 0,
      emulator ? _fbb.CreateString(emulator) : 0);
}

struct Player_State FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_BANK_FILE = 6
  };
  const Player_Id *id() const {
    return GetPointer<const Player_Id *>(VT_ID);
  }
  const flatbuffers::String *bank_file() const {
    return GetPointer<const flatbuffers::String *>(VT_BANK_FILE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyTable(id()) &&
           VerifyOffset(verifier, VT_BANK_FILE) &&
           verifier.Verify(bank_file()) &&
           verifier.EndTable();
  }
};

struct Player_StateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<Player_Id> id) {
    fbb_.AddOffset(Player_State::VT_ID, id);
  }
  void add_bank_file(flatbuffers::Offset<flatbuffers::String> bank_file) {
    fbb_.AddOffset(Player_State::VT_BANK_FILE, bank_file);
  }
  explicit Player_StateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Player_StateBuilder &operator=(const Player_StateBuilder &);
  flatbuffers::Offset<Player_State> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Player_State>(end);
    fbb_.Required(o, Player_State::VT_ID);
    return o;
  }
};

inline flatbuffers::Offset<Player_State> CreatePlayer_State(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Player_Id> id = 0,
    flatbuffers::Offset<flatbuffers::String> bank_file = 0) {
  Player_StateBuilder builder_(_fbb);
  builder_.add_bank_file(bank_file);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Player_State> CreatePlayer_StateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Player_Id> id = 0,
    const char *bank_file = nullptr) {
  return fb::state::CreatePlayer_State(
      _fbb,
      id,
      bank_file ? _fbb.CreateString(bank_file) : 0);
}

inline const fb::state::State *GetState(const void *buf) {
  return flatbuffers::GetRoot<fb::state::State>(buf);
}

inline const fb::state::State *GetSizePrefixedState(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fb::state::State>(buf);
}

inline bool VerifyStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::state::State>(nullptr);
}

inline bool VerifySizePrefixedStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::state::State>(nullptr);
}

inline void FinishStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fb::state::State> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fb::state::State> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace state
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_STATE_FB_STATE_H_
